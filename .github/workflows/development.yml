name: development

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Note'
        required: true
        default: 'Run manually'
on:
  push:
    branches:
      - '!main'
      - '!develop'

jobs:
  fixer:
    runs-on: ubuntu-20.04
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Install docker-compose
        if: ${{ env.ACT }}
        run: |
          apt-get update && apt-get install -y docker-compose

      - name: Checkout
        uses: actions/checkout@v2

      - name: Start
        run: |
          cd ${GITHUB_WORKSPACE}
          make vendor
          cd ${GITHUB_WORKSPACE}/appBase/run
          make local
          make up

      - name: Run php-cs-fixer
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          docker-compose exec -T app make cs

      - name: Push fixed codes
        run: |
          echo "Branch is: [${{ steps.extract_branch.outputs.branch }}]"
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          if (git diff --shortstat | grep '[0-9]'); then \
            git add .; \
            git commit -m "Auto push by GitHub Actions (fixer)"; \
            git push origin HEAD:${GITHUB_REF}; \
          fi

  test:
    needs: fixer
    runs-on: ubuntu-20.04
    steps:
      - name: Install docker-compose
        if: ${{ env.ACT }}
        run: |
          apt-get update && apt-get install -y docker-compose

      - name: Checkout
        uses: actions/checkout@v2

      - name: Start
        run: |
          cd ${GITHUB_WORKSPACE}
          make vendor
          cd ${GITHUB_WORKSPACE}/appBase/run
          make local
          make up

      - name: Database initialize
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          #docker-compose exec -T app make compi
          docker-compose exec -T app make fresh

      - name: Frontend compile
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          docker-compose exec -T node make npmid

      - name: Run testing
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          docker-compose exec -T app make coverage

      - name: Save coverage report
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: appBase/lara-sample/storage/coverage/*
