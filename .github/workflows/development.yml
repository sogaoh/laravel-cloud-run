name: development

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Note'
        required: true
        default: 'Run manually'
  push:
    branches:
      - '!main'
      - '!develop'
      - 'feat/**'

jobs:
  fixer:
    #if: ${{ !env.ACT }}
    runs-on: ubuntu-20.04
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Install docker-compose
        if: ${{ env.ACT }}
        run: |
          apt-get update && apt-get install -y docker-compose

      - name: Checkout
        uses: actions/checkout@v2

      #- name: Cache vendor Directory
      #  id: composer-cache
      #  uses: actions/cache@v2
      #  with:
      #    path: ${GITHUB_WORKSPACE}/lara-sample/vendor
      #    key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
      #    restore-keys: |
      #      ${{ runner.os }}-composer-

      - name: Composer Install
        #if: steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          cd ${GITHUB_WORKSPACE}
          make vendor

      - name: Start
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          make local
          make up

      - name: Run php-cs-fixer
        if: ${{ !env.ACT }}
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          #docker-compose exec -T app make clr
          docker-compose exec -T app make cs

      - name: Push fixed codes
        if: ${{ !env.ACT }}
        run: |
          echo "Branch is: [${{ steps.extract_branch.outputs.branch }}]"
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          echo "::set-output name=GIT_DIFF::none"
          if (git diff --shortstat | grep '[0-9]'); then \
            git add .; \
            git commit -m "Auto push by GitHub Actions (fixer)"; \
            git push origin HEAD:${GITHUB_REF}; \
            echo "::set-output name=GIT_DIFF::fixed"
          fi
        id: push-fixed-codes

      - name: Get GIT_DIFF
        if: ${{ !env.ACT }}
        run: echo 'GIT_DIFF is ' ${{ steps.push-fixed-codes.outputs.GIT_DIFF }}

      - name: Notify to Slack (If fixed)
        if: ${{ !env.ACT && steps.push-fixed-codes.outputs.GIT_DIFF != 'none'}}
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: ref,author
          custom_payload: |
            {
              attachments: [{
                color: 'warning',
                text: `Auto fixed : ${process.env.AS_REF}\n (author) ${process.env.AS_AUTHOR}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  test:
    needs: fixer
    runs-on: ubuntu-20.04
    steps:
      - name: Install docker-compose
        if: ${{ env.ACT }}
        run: |
          apt-get update && apt-get install -y docker-compose

      - name: Checkout
        uses: actions/checkout@v2

      #- name: Cache vendor Directory
      #  id: composer-cache
      #  uses: actions/cache@v2
      #  with:
      #    path: ${GITHUB_WORKSPACE}/lara-sample/vendor
      #    key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
      #    restore-keys: |
      #      ${{ runner.os }}-composer-

      - name: Composer Install
        #if: steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          cd ${GITHUB_WORKSPACE}
          make vendor

      - name: Start
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          make local
          make up

      - name: Database initialize
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          #docker-compose exec -T app make clr
          docker-compose exec -T app make fresh

      #- name: Cache node_modules Directory
      #  id: node_modules-cache
      #  uses: actions/cache@v2
      #  with:
      #    path: ${GITHUB_WORKSPACE}/lara-sample/node_modules
      #    key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      #    restore-keys: |
      #      ${{ runner.os }}-node_modules-

      - name: NPM Install
        #if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          docker-compose exec -T node make npmi

      - name: Frontend compile
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          docker-compose exec -T node make npmd

      - name: Run testing
        run: |
          cd ${GITHUB_WORKSPACE}/appBase/run
          docker-compose exec -T app make coverage

      - name: Save coverage report
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: appBase/lara-sample/storage/coverage/*

      - name: Notify to Slack
        if: ${{ !env.ACT && always() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: message,author,ref,workflow,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
